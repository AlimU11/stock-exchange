-- Generated by Oracle SQL Developer Data Modeler 20.4.0.374.0801
--   at:        2021-05-05 01:43:07 CEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE base_prices (
    pricedate    DATE NOT NULL,
    price        FLOAT(6) NOT NULL,
    currency     VARCHAR2(3 CHAR) NOT NULL,
    security_id  INTEGER NOT NULL
);

COMMENT ON COLUMN base_prices.pricedate IS
    'Date of the related price';

COMMENT ON COLUMN base_prices.price IS
    'Price of Security';

COMMENT ON COLUMN base_prices.currency IS
    'Base currency of security in which it represented on the market';

COMMENT ON COLUMN base_prices.security_id IS
    'ID of related Security';

ALTER TABLE base_prices ADD CONSTRAINT base_price_pk PRIMARY KEY ( pricedate,
                                                                   security_id );

CREATE TABLE brokers (
    broker_id  INTEGER NOT NULL,
    name       VARCHAR2(64) NOT NULL
);

ALTER TABLE brokers ADD CONSTRAINT broker_pk PRIMARY KEY ( broker_id );

CREATE TABLE clients (
    shareholder_id    INTEGER NOT NULL,
    broker_id         INTEGER NOT NULL,
    name              VARCHAR2(64) NOT NULL,
    surname           VARCHAR2(64) NOT NULL,
    birthdate         DATE NOT NULL,
    registrationdate  DATE NOT NULL,
    phonenumber       INTEGER,
    email             VARCHAR2(64)
);

COMMENT ON COLUMN clients.registrationdate IS
    'Date of registration with the broker';

ALTER TABLE clients ADD CONSTRAINT client_pk PRIMARY KEY ( shareholder_id,
                                                           broker_id );

ALTER TABLE clients ADD CONSTRAINT client_phonenumber_uk UNIQUE ( phonenumber );

ALTER TABLE clients ADD CONSTRAINT client_email_uk UNIQUE ( email );

CREATE TABLE exchange_currency_rates (
    exchratedate  DATE NOT NULL,
    currencypair  VARCHAR2(6 CHAR) NOT NULL,
    rate          FLOAT(6) NOT NULL
);

COMMENT ON COLUMN exchange_currency_rates.exchratedate IS
    'Exchange currency rate date related to exact curreny pair';

COMMENT ON COLUMN exchange_currency_rates.currencypair IS
    'Currency pair';

COMMENT ON COLUMN exchange_currency_rates.rate IS
    'Exact rate between currencies';

ALTER TABLE exchange_currency_rates ADD CONSTRAINT exch_rate_pk PRIMARY KEY ( exchratedate,
                                                                              currencypair );

CREATE TABLE exchanges (
    exchange_id       INTEGER NOT NULL,
    exchangedate      DATE NOT NULL,
    amount            INTEGER NOT NULL,
    security_id       INTEGER NOT NULL,
    broker_id_buyer   INTEGER,
    broker_id_seller  INTEGER,
    issuer_id_seller  INTEGER,
    trader_id_seller  INTEGER,
    trader_id_buyer   INTEGER
);

ALTER TABLE exchanges
    ADD CONSTRAINT seller CHECK ( ( ( broker_id_seller IS NOT NULL )
                                    AND ( issuer_id_seller IS NULL )
                                    AND ( trader_id_seller IS NULL ) )
                                  OR ( ( issuer_id_seller IS NOT NULL )
                                       AND ( broker_id_seller IS NULL )
                                       AND ( trader_id_seller IS NULL ) )
                                  OR ( ( trader_id_seller IS NOT NULL )
                                       AND ( broker_id_seller IS NULL )
                                       AND ( issuer_id_seller IS NULL ) ) );

ALTER TABLE exchanges
    ADD CONSTRAINT buyer CHECK ( ( ( broker_id_buyer IS NOT NULL )
                                   AND ( trader_id_buyer IS NULL ) )
                                 OR ( ( trader_id_buyer IS NOT NULL )
                                      AND ( broker_id_buyer IS NULL ) )
                                 OR ( ( broker_id_buyer IS NULL )
                                      AND ( trader_id_buyer IS NULL ) ) );

ALTER TABLE exchanges ADD CONSTRAINT exchange_pk PRIMARY KEY ( exchange_id );

CREATE TABLE issuers (
    issuer_id             INTEGER NOT NULL,
    name                  VARCHAR2(64 CHAR) NOT NULL,
    marketcapitalization  VARCHAR2(9 CHAR) NOT NULL,
    durationafs           INTERVAL YEAR TO MONTH NOT NULL,
    publicfloat           VARCHAR2(9 CHAR) NOT NULL,
    sector                VARCHAR2(64 CHAR) NOT NULL,
    employees             VARCHAR2(8 CHAR)
);

COMMENT ON COLUMN issuers.issuer_id IS
    'ID of Issuer';

COMMENT ON COLUMN issuers.name IS
    'Issuer''s Name';

COMMENT ON COLUMN issuers.marketcapitalization IS
    'The market value of a publicly traded company''s outstanding shares';

COMMENT ON COLUMN issuers.durationafs IS
    'Audited financial statements  - Public companies are obligated by law to ensure that their financial statements are audited by a registered CPA. The purpose of the independent audit is to provide assurance that the management has presented financial statements that are free from material error. ';

ALTER TABLE issuers ADD CONSTRAINT issuer_pk PRIMARY KEY ( issuer_id );

CREATE TABLE payments (
    exchange_id             INTEGER NOT NULL,
    paidamount              FLOAT(6) NOT NULL,
    currency                VARCHAR2(3) NOT NULL,
    exch_rate_exratedate    DATE,
    exch_rate_currencypair  VARCHAR2(6)
);

COMMENT ON COLUMN payments.exchange_id IS
    'ID of exact related Exchange';

COMMENT ON COLUMN payments.paidamount IS
    'Paid amount';

COMMENT ON COLUMN payments.currency IS
    'Currency of payment';

ALTER TABLE payments ADD CONSTRAINT payment_pk PRIMARY KEY ( exchange_id );

CREATE TABLE securities (
    security_id   INTEGER NOT NULL,
    name          VARCHAR2(128 CHAR) NOT NULL,
    type          VARCHAR2(1 CHAR) NOT NULL,
    issuer_id     INTEGER NOT NULL,
    issuedate     DATE,
    issueprice    VARCHAR2(12),
    issuesize     VARCHAR2(9 CHAR),
    maturitydate  DATE,
    couponrate    FLOAT(3),
    coupontype    VARCHAR2(5 CHAR),
    eps           FLOAT(3)
);

COMMENT ON COLUMN securities.security_id IS
    'Security ID';

COMMENT ON COLUMN securities.type IS
    'Type of Security:
D - DEBT
E - EQUITY';

COMMENT ON COLUMN securities.issuer_id IS
    'ID of related Issuer';

COMMENT ON COLUMN securities.issuedate IS
    'The date on which a corporation issues security to the public ';

COMMENT ON COLUMN securities.issueprice IS
    'Issue price (or “public offering price”) is the price at which it is taken to market at the time of issue';

COMMENT ON COLUMN securities.maturitydate IS
    'The period from the issue date until the final contractually scheduled payment (Debt)';

COMMENT ON COLUMN securities.couponrate IS
    'A coupon payment on a bond is the annual interest payment that the bondholder receives from the bond''s issue date until it matures (Debt)';

COMMENT ON COLUMN securities.coupontype IS
    'FIX - fixed coupon
FLOAT - floating coupon
ZERO - zero coupon';

COMMENT ON COLUMN securities.eps IS
    'Earnings per share (EQUITY)';

ALTER TABLE securities ADD CONSTRAINT security_pk PRIMARY KEY ( security_id );

CREATE TABLE security_lists (
    security_id   INTEGER NOT NULL,
    approvaldate  DATE NOT NULL
);

ALTER TABLE security_lists ADD CONSTRAINT security_list_pk PRIMARY KEY ( security_id );

CREATE TABLE traders (
    shareholder_id    INTEGER NOT NULL,
    name              VARCHAR2(64) NOT NULL,
    surname           VARCHAR2(64) NOT NULL,
    birthdate         DATE NOT NULL,
    registrationdate  DATE NOT NULL,
    phonenumber       INTEGER,
    email             VARCHAR2(64)
);

COMMENT ON COLUMN traders.registrationdate IS
    'Date of registration on market';

ALTER TABLE traders ADD CONSTRAINT trader_pk PRIMARY KEY ( shareholder_id );

ALTER TABLE traders ADD CONSTRAINT trader_phonenumber_uk UNIQUE ( phonenumber );

ALTER TABLE traders ADD CONSTRAINT trader_email_uk UNIQUE ( email );

ALTER TABLE base_prices
    ADD CONSTRAINT base_price_security_fk FOREIGN KEY ( security_id )
        REFERENCES securities ( security_id )
            ON DELETE CASCADE;

ALTER TABLE clients
    ADD CONSTRAINT client_broker_fk FOREIGN KEY ( broker_id )
        REFERENCES brokers ( broker_id )
            ON DELETE CASCADE;

ALTER TABLE exchanges
    ADD CONSTRAINT exch_broker_buyer_fk FOREIGN KEY ( broker_id_buyer )
        REFERENCES brokers ( broker_id );

ALTER TABLE exchanges
    ADD CONSTRAINT exch_broker_seller_fk FOREIGN KEY ( broker_id_seller )
        REFERENCES brokers ( broker_id );

ALTER TABLE exchanges
    ADD CONSTRAINT exch_issuer_seller_fk FOREIGN KEY ( issuer_id_seller )
        REFERENCES issuers ( issuer_id );

ALTER TABLE exchanges
    ADD CONSTRAINT exch_security_list_fk FOREIGN KEY ( security_id )
        REFERENCES security_lists ( security_id );

ALTER TABLE exchanges
    ADD CONSTRAINT exch_trader_buyer_fk FOREIGN KEY ( trader_id_buyer )
        REFERENCES traders ( shareholder_id );

ALTER TABLE exchanges
    ADD CONSTRAINT exch_trader_seller_fk FOREIGN KEY ( trader_id_seller )
        REFERENCES traders ( shareholder_id );

ALTER TABLE payments
    ADD CONSTRAINT payment_exch_fk FOREIGN KEY ( exchange_id )
        REFERENCES exchanges ( exchange_id )
            ON DELETE CASCADE;

ALTER TABLE payments
    ADD CONSTRAINT payment_exch_rate_fk FOREIGN KEY ( exch_rate_exratedate,
                                                      exch_rate_currencypair )
        REFERENCES exchange_currency_rates ( exchratedate,
                                             currencypair );

ALTER TABLE securities
    ADD CONSTRAINT security_issuer_fk FOREIGN KEY ( issuer_id )
        REFERENCES issuers ( issuer_id )
            ON DELETE CASCADE;

ALTER TABLE security_lists
    ADD CONSTRAINT security_lists_securities_fk FOREIGN KEY ( security_id )
        REFERENCES securities ( security_id )
            ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER fkntm_base_prices BEFORE
    UPDATE OF security_id ON base_prices
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table BASE_PRICES is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_clients BEFORE
    UPDATE OF broker_id ON clients
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table CLIENTS is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_payments BEFORE
    UPDATE OF exchange_id ON payments
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table PAYMENTS is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_securities BEFORE
    UPDATE OF issuer_id ON securities
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table SECURITIES is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_security_lists BEFORE
    UPDATE OF security_id ON security_lists
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table SECURITY_LISTS is violated');
END;
/

CREATE SEQUENCE brokers_seq;

CREATE OR REPLACE TRIGGER brokers_trg BEFORE
    INSERT ON brokers
    FOR EACH ROW
    WHEN ( new.broker_id IS NULL )
BEGIN
    SELECT
        brokers_seq.NEXTVAL
    INTO :new.broker_id
    FROM
        dual;

END;
/

CREATE SEQUENCE clients_seq;

CREATE OR REPLACE TRIGGER clients_trg BEFORE
    INSERT ON clients
    FOR EACH ROW
    WHEN ( new.shareholder_id IS NULL )
BEGIN
    SELECT
        clients_seq.NEXTVAL
    INTO :new.shareholder_id
    FROM
        dual;

END;
/

CREATE SEQUENCE exchanges_seq;

CREATE OR REPLACE TRIGGER exchanges_trg BEFORE
    INSERT ON exchanges
    FOR EACH ROW
    WHEN ( new.exchange_id IS NULL )
BEGIN
    SELECT
        exchanges_seq.NEXTVAL
    INTO :new.exchange_id
    FROM
        dual;

END;
/

CREATE OR REPLACE TRIGGER buyer_seller_trader BEFORE
    INSERT ON exchanges
    FOR EACH ROW
    WHEN ( new.trader_id_seller IS NOT NULL
           AND new.trader_id_buyer IS NOT NULL )
BEGIN
    IF :new.trader_id_seller = :new.trader_id_buyer THEN
        raise_application_error(-20000, 'Integrity constraint SELLER trader and BUYER could not be the same');
    END IF;
END;
/

CREATE SEQUENCE issuers_seq;

CREATE OR REPLACE TRIGGER issuers_trg BEFORE
    INSERT ON issuers
    FOR EACH ROW
    WHEN ( new.issuer_id IS NULL )
BEGIN
    SELECT
        issuers_seq.NEXTVAL
    INTO :new.issuer_id
    FROM
        dual;

END;
/

CREATE SEQUENCE securities_seq;

CREATE OR REPLACE TRIGGER securities_trg BEFORE
    INSERT ON securities
    FOR EACH ROW
    WHEN ( new.security_id IS NULL )
BEGIN
    SELECT
        securities_seq.NEXTVAL
    INTO :new.security_id
    FROM
        dual;

END;
/

CREATE SEQUENCE traders_seq;

CREATE OR REPLACE TRIGGER traders_trg BEFORE
    INSERT ON traders
    FOR EACH ROW
    WHEN ( new.shareholder_id IS NULL )
BEGIN
    SELECT
        traders_seq.NEXTVAL
    INTO :new.shareholder_id
    FROM
        dual;

END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            10
-- CREATE INDEX                             0
-- ALTER TABLE                             28
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           5
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0